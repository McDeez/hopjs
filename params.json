{"google":"","tagline":"Restful API Framework","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Hopjs","body":"# HopJS \r\n\r\nThe RESTful API dynamic web apps crave.\r\n\r\n## Introduction\r\n\r\nHopJS is a RESTful based declarative API framework for Node.js that:\r\n  * Supports Android, and Shell client side stub generation\r\n  * Generates easy to use browser side API hooks\r\n  * Has a declarative testing interface, which can generate native unit tests in JavaScript and Shell code\r\n  * Generates it's own API documentation\r\n  * Supports intelligent server-side caching of results using Redis\r\n  * Supports event based APIs using Socket.io \r\n  * Enhanced APIs with optional declarative models\r\n\r\n[API Documentation](http://celer.github.com/hopjs/doc/)\r\n\r\n*First, we simply define the interface you wish to expose*\r\n(either as static methods on an object or as a proper JavaScript class)\r\n```javascript\r\n\r\nUserService={};\r\n\r\n//All functions backed by HopJS should have a signature of (input,onComplete,request)\r\nUserService.create=function(input,onComplete){\r\n  // Here we would create a new user and call onComplete(err,result) when were done\r\n}\r\n\r\nUserService.authenticate=function(input,onComplete){\r\n  // Here we would authenticate a user and call onComplete(err,result) when were done\r\n}\r\n\r\n```\r\n*Next, we use Hop to define the interface; this will expose the interface via a RESTful API*\r\n\r\n```javascript\r\n\r\n//This will create a RESTful set of URLs which expose the following functions:\r\nHop.defineClass(\"UserService\",UserService,function(api){\r\n  api.post(\"create\",\"/user\").demand(\"email\").demand(\"username\");\r\n  api.post(\"authenticate\",\"/user/auth\").demand(\"email\").demand(\"username\");\r\n});\r\n\r\n//Now tell HopJS to expose our API in express.js\r\nHop.exposeAPI(\"/api/\",app)\r\n\r\n```\r\n\r\nNow that we've done that we get a few things:\r\n * We have our RESTful API\r\n * HopJS generates a client side API we can use in our browser which will have the following definitions:\r\n   * UserService.create(input,onComplete)\r\n   * UserService.authenticate(input,onComplete)\r\n\r\nSo now our web-site has:\r\n```shell\r\n  # An API for UserService.create \r\n  POST /api/user\r\n  # An API for UserService.authenticate\r\n  POST /api/user/authenticate\r\n  # Documentation for our API as generated by HopJS with online unit tests\r\n  GET /api/ \r\n  # A jQuery based client set of stubs for our API\r\n  GET /api/api.js\r\n  # A JSON definition of our API for client side stub generation\r\n  GET /api/api.json\r\n```\r\n[defineClass documenation](http://celer.github.com/hopjs/doc/classes/Hop.Method.html)\r\n\r\n*But we can also define the test cases for our new interface!*\r\n\r\n```javascript\r\n\r\nHop.defineTestCase(\"UserService.authenticate\",function(test){\r\n    var validUser = { email:\"test@test.com\", username:\"TestUser\" };\r\n    test.do(\"UserService.create\").with(validUser).noError();\r\n    test.do(\"UserService.authenticate\").with(validUser).noError();\r\n    test.do(\"UserService.authenticate\").with({password:\"BOB\"},validUser).hasError(/Permission denied/);\r\n});\r\n\r\n```\r\n[defineTestCase documentation](http://celer.github.com/hopjs/doc/classes/Hop.TestTask.html)\r\n\r\n\r\n*We can unit test our API using the hopjs utility, which will run all the unit tests from the command line:*\r\n```shell\r\nnpm install hopjs-remote -g\r\nhopjs --url http://localhost:3000/ --unitTest\r\n```\r\n*We can also run the test in the browser of our choosing*\r\n\r\n```shell\r\nhopjs-browser-test --url http://localhost:3000/  --browser firefox\r\n```\r\n\r\n\r\n*Now let's suppose we wanted an Android set of native client stubs for our API in Java:*\r\n\r\n```shell\r\nhopjs-gen -url http://www.website.com:3000/ android -outputDir ./androidApp -package com.website.www\r\n```\r\nYou can see a complete working example at: https://github.com/celer/hopjs/tree/master/examples/intro\r\n\r\n## Intelligent server-side caching of results\r\n\r\nNow lets assume that we've written a killer server-side API, but we haven't done any caching of our results so each \r\ntime we need to do something we're hitting our database. HopJS has the ability to add caching on top of your API quickly\r\nand easily.\r\n\r\n```javascript\r\n\r\n  /* \r\n      First let's tell HopJS that we want to use caching  \r\n      log - log what is happening with our server side cache\r\n      redisClient - the redisClient to use - HopJS will create a default one if not specified\r\n  */\r\n  Hop.enableCaching({ log:true, redisClient: myRedisClient });\r\n \r\n   \r\n  Hop.defineClass(\"UserService\",UserService,function(api){\r\n    api.usage(\"Manages users\");\r\n   \r\n    //Cache user's as they are loaded for 60 seconds, and try to force the client to cache the results as well!\r\n    api.get(\"load\",\"/user/:id\").demand(\"id\").cacheId(\"/user/:id\",60,true);\r\n   \r\n    //Invalidate the cache when a user is deleted \r\n    api.del(\"delete\",\"/user/:id\").demand(\"id\").cacheInvalidate(\"/user/:id\");\r\n    \r\n    //Cache the search results for 5000\r\n    api.get(\"list\",\"/user/\").optional(\"sortBy\").cacheId(\"/users/:start/:size/\",5000).demand(\"start\").demand(\"size\");\r\n    \r\n    \r\n  });\r\n\r\n```\r\n\r\nCaching works by associating a unique ID with each result returned from an API call - the trick is that the ID is calculated based upon the object that is used as an input or returned as a result of calling the API call. \r\n\r\nTime for a quick example:\r\n\r\n\r\n```javascript\r\n  /* \r\n    Assuming the requested user was found Redis would return the cached object, otherwise HopJS would\r\n    call the underlying API, and also keep a copy of the returned object\r\n    under the id '/user/5' for a duration of 60 sections. HopJS would also add all the extra headers\r\n    to get the HTTP agent on the other end to cache this result for the specified duration as well!\r\n\r\n    Essentially\r\n      - If we have the cached object return it\r\n      - If not execute the call and cache the result \r\n\r\n    The id for the cached object is generated by plugging the result objects properties into \"/user/:id\" to compute \"/user/5\"\r\n\r\n  */\r\n  UserService.load({id:5}) \r\n\r\n  /*\r\n    This would end up deleting the cached object from Redis\r\n  */\r\n  UserService.del({id:5})\r\n```\r\n\r\nYou can see a complete working example at: https://github.com/celer/hopjs/tree/master/examples/caching\r\n\r\n## API Interfaces\r\n\r\nHopJS also has the ability to define an API interface which can be used to quickly stub out APIs which share their interfaces:\r\n\r\n```javascript\r\n\r\n  // This will define an interface which can the be applied to other objects later\r\n  Hop.defineInterface(\"Notification\",function(api){\r\n      //#classname will cause the classname of the extending class to be substituted into the path\r\n      api.post(\"send\",\"#classname/send\").usage(\"Sends a message\").demand(\"msg\").demand(\"subject\").demand(\"to\");\r\n  });\r\n\r\n  Hop.defineClass(\"Email\",EmailService,function(api){\r\n    //This will cause the interface defined above to be applied to this object\r\n    // Now EmailService.send will exist on /email/send with all the associated demands, etc.\r\n    api.extend(\"Notification\");\r\n  });  \r\n\r\n```\r\nYou can see a complete working example at: https://github.com/celer/hopjs/tree/master/examples/interface\r\n\r\n## Working with files\r\n\r\nWorking with files is pretty simple! To send files we can simply tell HopJS how to send the file, either as a raw file, or as an attachmet. We can \r\nalso allow uploads using the .demandFile or the .optionalFile\r\n\r\n```javascript\r\n\tFileTest.sendFile=function(input,onComplete){\r\n\t\treturn onComplete(null,Hop.sendFile(\"public/pig.png\"));\r\n\t}\t\r\n\r\n\tFileTest.sendAttachment=function(input,onComplete){\r\n\t\treturn onComplete(null,Hop.sendAttachment(\"public/pig.png\",\"image.png\"));\r\n\t}\r\n\r\n\tFileTest.upload=function(input,onComplete){\r\n\t\treturn onComplete(null,input);\r\n\t}\t\r\n\r\n\r\n\tHop.defineClass(\"FileTest\",FileTest,function(api){\r\n\t\tapi.get(\"sendFile\",\"/file\")\r\n\t\tapi.get(\"sendAttachment\",\"/attachment\");\r\n\t\tapi.post(\"upload\",\"/upload\").demandFile(\"required\").optionalFile(\"optional\");\r\n\t});  \r\n```\r\nYou can see a complete working example at: https://github.com/celer/hopjs/tree/master/examples/files\r\n\r\n## Models\r\n\r\nModels can be defined which will enable both validation of inputs but re-use of documenation and type conversion.\r\n\r\n```javascript\r\n\tHop.defineModel(\"User\",function(user){\r\n\t\tuser.field(\"id\",\"UserID\",\"The user's id\").integer().ID();\r\n\t\tuser.field(\"name\",\"Username\",\"The user's username\").string().regexp(/[A-Za-z0-9\\_\\-]{3,10}/,\"Usernames must be between 3 and 10 characters long, and can only contain alphanumeric characters\");\r\n\t\tuser.field(\"email\",\"Email\",\"The user's email address\").string();\r\n\t\tuser.field(\"password\",\"Password\",\"The user's password\").password();\r\n\t});\r\n```\r\nNow we can simply indicate a model is used for a call by using .useModel, .inputModel or .outputModel\r\n\r\n```javascript\r\n\tHop.defineClass(\"UserService\",UserService,function(api){\r\n\t\tapi.usage(\"Manages users\");\r\n\t\tapi.post(\"create\",\"/user\").usage(\"Creates a user\").demands(\"email\",\"name\",\"password\").useModel(\"User\");\r\n\t\tapi.post(\"authenticate\",\"/user/auth\").usage(\"Authenticates a user\").demands(\"password\",\"name\").useModel(\"User\");\r\n\t\tapi.get(\"currentUser\",\"/user\").usage(\"Returns the current user\").outputModel(\"User\");\r\n\t\tapi.get(\"logout\",\"/user/logout\").usage(\"Logs the current user out\");\r\n\t\tapi.del(\"del\",\"/user/:id\").usage(\"Deletes the user\").demand(\"id\").inputModel(\"User\");\r\n\t});\r\n```\r\n\r\nYou can see a complete working example at: https://github.com/celer/hopjs/tree/master/examples/model\r\n\r\n# Notes about REST\r\n\r\n * Our implementation of REST is designed to be used with forms and does not support null values or special types, all values are converted to strings (null==\"\")\r\n * Per specification HTTP delete does not allow passing of parameters beyond what are specified in the path\r\n\r\n# Known Issues / Todo\r\n - Android API is non-functional after major re-factor\r\n - A bug in combination-stream, which is utilized by request and form-data prevents the unit tests for expirements/test from passing, see my fork of combination-stream for a fix\r\n - Curl can't save session cookies so some shell tests won't wor\r\n - Need to add SSL support\r\n - Need to add dev key support\r\n"}