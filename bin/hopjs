#/usr/bin/env node

require("../lib/remote");
var path=require('path');

var optimist = require('optimist');

optimist=optimist.demand("url").describe("url","The url of the remote hopjs API to use");
optimist=optimist.describe("list","List the available methods");
optimist=optimist.describe("help","Describe a specific method");
optimist=optimist.describe("eval","Eval the specified file with the api included in the global context");

var args = optimist.argv;

if(args.url){
  Hop.remoteAPI(args.url,function(err,api){
    if(args["_"].length>0){

      var call = args["_"][0];
      var cn = call.split(".");
      if(cn.length==2){
        if(!api[cn[0]]) {
          console.error("invalid object specified: "+cn[0]);
          process.exit(-2);
        } 
        if(!api[cn[0]][cn[1]]) {
          console.error("invalid method specified: "+cn[1]);
          process.exit(-3);
        } 
        try { 
                api[cn[0]][cn[1]](args,function(err,res){
                  if(err){
                    console.error(err); 
                    process.exit(-128);
                  } else { 
                    console.log(res);
                    process.exit(0);
                  }
                }); 
        } catch(e){
          console.error(e);
          process.exit(-4);
        }
      } else {
        console.error("Invalid method name:"+call);
      }
  
    } else {
      if(args.list){
        for(var objName in api._json.Objects){
          for(var methodName in api._json.Objects[objName].methods){
            console.log(objName+"."+methodName); 
          }
        }
        process.exit(-1);
      } else if(args.help){
      
              var call = args.help;
              var cn = call.split(".");
              if(cn.length==2){
                if(!api._json.Objects[cn[0]]) {
                  console.error("Invalid object specified: "+cn[0]);
                  process.exit(-2);
                } 
                if(!api._json.Objects[cn[0]].methods[cn[1]]) {
                  console.error("Invalid method specified: "+cn[1]);
                  process.exit(-3);
                } 
              }
              var method = api._json.Objects[cn[0]].methods[cn[1]];
     
          console.log(call + (method.desc?" - "+method.desc:""));
          console.log(method.method.toUpperCase()+" "+path.join(api._json.basePath,method.path));
          console.log("------------------------");
          for(var param in method.params){
            console.log("\t",param+(method.params[param].demand?"*":""),"\t",method.params[param].desc);
          } 
          console.log("\n");
          console.log("* required");
        process.exit(-1);
      } else if(args.eval){
        var fs = require('fs');
        fs.readFile(args.eval,function(err,data){
          if(err) { 
            console.error("Unable to open file:"+err);
            process.exit(-8);
          } else {
            data = data.toString();
            api.args=args;
            with(api){ 
              eval(data);
            }
          }
        });
      } else {
        optimist.showHelp();
        process.exit(-1);
      }
    }
  });

}
