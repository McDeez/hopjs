#!/usr/bin/env node

require("../lib/remote");
var path=require('path');

var optimist = require('optimist');

optimist=optimist.demand("url").describe("url","The url of the remote hopjs API to use");
optimist=optimist.describe("list","List the available methods");
optimist=optimist.describe("help","Describe a specific method");
optimist=optimist.describe("eval","Eval the specified file with the api included in the global context");
optimist=optimist.describe("unitTest","Run the unit tests on the specified url");
optimist=optimist.describe("testDetails","Show the details for each test");

var args = optimist.argv;

if(args.url){
	var apiOptions={};
	if(args.unitTest){
		apiOptions.ignoreDemands=true;
	}

  Hop.remoteAPI(args.url,function(err,api){
    if(args["_"].length>0){

      var call = args["_"][0];
      
      var m = /(.*)\.([A-Za-z0-9]+)/.exec(call);
      if(m.length==3){
        var object=m[1];
        var method=m[2];
        
        if(!api[object]) {
          console.error("invalid object specified: "+object);
          process.exit(-2);
        } 
        if(!api[object][method]) {
          console.error("invalid method specified: "+method);
          process.exit(-3);
        } 
        try { 
                api[object][method](args,function(err,res){
                  if(err){
                    console.error(err); 
                    process.exit(-128);
                  } else { 
                    console.log(res);
                    process.exit(0);
                  }
                }); 
        } catch(e){
          console.error(e);
          process.exit(-4);
        }
      } else {
        console.error("Invalid method name:"+call);
      }
  
    } else {
      if(args.list){
        for(var objName in api._json.Objects){
          for(var methodName in api._json.Objects[objName].methods){
            console.log(objName+"."+methodName); 
          }
        }
        process.exit(-1);
      } else if(args.unitTest){
        Hop.remoteAPITestHarness(args.url,function(err,testHarness){
          try {
            eval(testHarness);

            Hop.TestCase.prototype.do=function(methodName,input,onComplete){
              var m = /(.*)\.([A-Za-z0-9]+)/.exec(methodName);
              var object=m[1];
              var method=m[2];
                
              api[object][method](input,onComplete);
  
            }
            Hop.TestCase.lastTaskIndex=-1;
            Hop.TestCase.results={ pass:0, fail:0};
            Hop.TestCase.prototype.testResult=function(taskIndex,method,input,err,response,testType,result){
              if(Hop.TestCase.lastTaskIndex!=taskIndex){
                console.log("#"+(taskIndex+1),method);
                Hop.TestCase.lastTaskIndex=taskIndex;
              
                if(args.testDetails){
                  console.log("\tInput",JSON.stringify(input));
                  console.log("\tError",err);
                  console.log("\tResult",JSON.stringify(response));
                  console.log();
                } 
              }
              console.log("\t",(result?"P":"F"),Hop.Tests[testType][result?"pass":"fail"]);

              Hop.TestCase.results[(result?"pass":"fail")]++;
            }
            if(typeof args.unitTest=="string"){
              Hop.TestCase.run(args.unitTest); 
            } else {
              var toRun=Object.keys(Hop.TestCases);
              var run=function(){
                if (toRun.length>0){
                  var testCase = toRun.shift();
                  Hop.TestCase.run(testCase,function(){ 
                      Hop.TestCase.lastTaskIndex=-1;
                      run();
                      });
                } else {  
                  console.log();
                  console.log("---------------------------------------------------------------");
                  
                  console.log("Pass",Hop.TestCase.results.pass,"Fail",Hop.TestCase.results.fail, (Hop.TestCase.results.pass/(Hop.TestCase.results.pass+Hop.TestCase.results.fail)*100).toFixed(2)+"%");
                  process.exit((Hop.TestCase.results.fail==0?0:128));
                }
              }
              run();
            }
          } catch(e){
            console.error("Error loading test harness:",e);
            process.exit(-9);
          }
        });     
      } else if(args.help){
        var m = /(.*)\.([A-Za-z0-9]+)/.exec(args.help);
        if(m.length==3){
          var object=m[1];
          var method=m[2];
          
          if(!api[object]) {
            console.error("invalid object specified: "+object);
            process.exit(-2);
          } 
          if(!api[object][method]) {
            console.error("invalid method specified: "+method);
            process.exit(-3);
          } 
      
          var method = api._json.Objects[object].methods[method];            
 
          console.log(call + (method.desc?" - "+method.desc:""));
          console.log(method.method.toUpperCase()+" "+path.join(api._json.basePath,method.path));
          console.log("------------------------");
          for(var param in method.params){
            console.log("\t",param+(method.params[param].demand?"*":""),"\t",method.params[param].desc);
          } 
          console.log("\n");
          console.log("* required");
          process.exit(0);
        } else {
          console.error("Invalid method call",args.help);
          process.exit(-1);
        }
      } else if(args.eval){
        var fs = require('fs');
        fs.readFile(args.eval,function(err,data){
          if(err) { 
            console.error("Unable to open file:"+err);
            process.exit(-8);
          } else {
            data = data.toString();
            api.args=args;
            with(api){ 
              eval(data);
            }
          }
        });
      } else {
        optimist.showHelp();
        process.exit(-1);
      }
    }
  },apiOptions);

}
