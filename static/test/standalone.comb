<% if( typeof supportCode!="undefined" ) { %>
  

  if(typeof Hop=="undefined")
    Hop={};
  if(typeof Hop.TestUtils=="undefined")
    Hop.TestUtils={};

  if(typeof Hop.TestCase=="undefined")
    Hop.TestCase={};

  <% for(var testUtil in Hop.TestUtils){ %>
    //This function was generated by a template and is in lib/test.js
    Hop.TestUtils.<%=testUtil%>=<%=Hop.TestUtils[testUtil].toString()%>
  <% } %>

  if(typeof Hop.load == "undefined"){
    Hop.load=function(urlOrService,onComplete){
      //Override this function to load something other then a url, so for example, imagine you had a
      // registry of services, you might perhaps refer to a service by name

      if(/\/$/.test(urlOrService)){
        urlOrService+="api.js"
      }

      if(typeof jQuery!="undefined"){ 
        console.log("loading",urlOrService);
        jQuery.getScript(urlOrService+"?url="+urlOrService).done(function(){
          onComplete(null,true); 
        }).fail(function(){
          onComplete("Failed to load:"+urlOrService);
        }); 
      } else {
        throw new Error("Hop.load is not implemented");
      }
    }
  }


  Hop.TestCase=function(name){
    this.tasks=[];
    this.name=name;
    this.uses=[];
    this.taskIndex=0;
    Hop.TestCases[name]=this;
  }

  Hop.TestCases={ };

  Hop.TestCase.prototype.do=function(method,inputValue,onComplete){
    
  }

  Hop.TestCase.prototype.use=function(urlOrService){
    this.uses.push(urlOrService);  
  }

  Hop.TestCase.prototype.testResult=function(method,inputValue,err,outputValue,testType,result){

  }

  Hop.TestCase.prototype.addTask=function(task){
    this.tasks.push(task);
  }

  Hop.TestCase.prototype.runTasks=function(onComplete){
    
    this._onComplete=onComplete||function(){};
    this.reset(); 
    Hop.TestUtils.clearValues();
    var self=this;
    
    var run = function(){
      self.do("TestService.log",{ msg: "Test: Starting "+this.name},function(){
        try {
          self.nextTask();
        } catch(e){
          console.error("Error running next task:"+e.toString());
        }
      })
    }

    var uses = this.uses.slice(0);
    nextUse=function(){
      if(uses.length>0){
        Hop.load(uses.shift(),function(err,ret){
          if(err){
            alert(err);
          }
          nextUse();
        }); 
      } else {
        run();
      }
    }

    nextUse();
    
  }

  Hop.TestCase.prototype.nextTask=function(onComplete){
    if(this.taskIndex < this.tasks.length){
      var self=this;
      (function(taskIndex){
        try {
          self.taskIndex++;
          self.tasks[taskIndex](self,taskIndex);
        } catch(e){
          console.log(e.toString());
        }
      })(this.taskIndex)
    } else {
      console.log("Done with all tasks");
      this._onComplete();
    }
  }

  Hop.TestCase.prototype.reset=function(){
    this.taskIndex=0;
  }
  
  Hop.Tests={
    <% for(var i in Hop.TestTask){ %>
      <% if(typeof Hop.TestTask[i]=="object"){%>
       <%=JSON.stringify(i)%>:<%= JSON.stringify(Hop.TestTask[i]) %>,    
      <% } %>
    <% } %>
  }

  Hop.TestCase.run=function(name,onComplete){
    if(!Hop.TestCases[name]){
      throw "Invalid test case name";
    }
    Hop.TestCases[name].runTasks(onComplete);
  }

<% } else {%>

  var testCase = new Hop.TestCase("<%=name%>");
  
  <% for(var i in uses){ %>
    testCase.use(<%#uses[i]%>);
  <% } %>

  <% for(var i in tasks){ %>
    testCase.addTask(function(testCase,taskIndex){
    <% var task = tasks[i]; %> 

    <% if(task.inputObjectFunc!=undefined){ %>
      var inputValue = (<%= task.inputObjectFunc %>)();     
    <% } else {%>
      var inputValue = <%= JSON.stringify(task.inputObject) %>;    
    <% } %>
      testCase.do("TestService.log",{ msg: "Test: Doing <%=task.funcName%>"},function(){
        try {
          testCase.do("<%=task.funcName%>",inputValue,function(err,output){
           <% for(var k in task.test){ %>
            <% var test = task.test[k]; %>   
                var value = <%= test.value!=undefined?JSON.stringify(test.value):"undefined"%>;
                var result = (<%=test.testFunc%>)(inputValue,err,output,value);
                testCase.testResult(taskIndex,"<%=task.funcName%>",inputValue,err,output,"<%=test.type%>",result);
           <% } %> 
           testCase.nextTask(); 
           });
        } catch(e){
          alert("Failed to run the next task:"+e.toString());
          testCase.nextTask();
        }   
      });
    });

  <% } %>
<% } %>
